#user  nobody;
worker_processes  2;@3
#worker_cpu_affinity 00000001 00000010;
worker_rlimit_nofile 8192;

error_log   "/mnt/homework/log/webserver/error_log"   debug; //错误日志存储位置
pid         "/mnt/homework/var/nginx.pid";//当前nginx 运行pid

events {
    use epoll;  //是否使用epoll模型 @1
    worker_connections  8192; //连接池的大小是 @1
}

http {
    include       mime.types; 
    #include       upstream.conf;
    default_type  application/octet-stream; // nginx 默认mime-type(传输格式) 无格式，字节流

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" "$http_cookie" "$http_user_agent" '
                      '$request_time $logid $remote_addr $server_addr $upstream_addr $host '
                      '"$http_x_forwarded_for" $product $subsys $tracecode $msec';

    access_log  "/mnt/homework/log/webserver/access_log"  main;

    client_body_temp_path /mnt/homework/webserver/cache/client_body;
    fastcgi_temp_path /mnt/homework/webserver/cache/fastcgi;
    proxy_temp_path /mnt/homework/webserver/cache/proxy;
    uwsgi_temp_path /mnt/homework/webserver/cache/uwsgi;
    scgi_temp_path /mnt/homework/webserver/cache/scgi;

    server_names_hash_bucket_size 128;
    client_header_buffer_size 4k;
    large_client_header_buffers 4 32k;
    client_max_body_size 20m;
    client_body_buffer_size 4m;

    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;

    fastcgi_connect_timeout 5;
    fastcgi_send_timeout 30s;
    fastcgi_read_timeout 30s;
    fastcgi_buffer_size 64k;
    fastcgi_buffers 4 64k;
    fastcgi_busy_buffers_size 128k;
    fastcgi_temp_file_write_size 128k;
    fastcgi_intercept_errors on;
    /**************长连接************/
    keepalive_timeout  0;//长连接等待时长 为0关闭长连接 @2
    #keepalive_timeout  65;

    gzip on;
    gzip_min_length 1k;
    gzip_buffers 4 16k;
    gzip_http_version 1.0;
    gzip_comp_level 2;
    gzip_types text/plain application/x-javascript text/css application/xml;
    gzip_vary on;

    policy_frame off; 
    policy_path "/mnt/homework/webserver/conf/";
    policy_dtdname policy.dtd;
    policy_docname policy.xml;
    policy_logpath "/mnt/homework/log/webserver";
    policy_logfile policy.;
    policy_logsize 1600;
    policy_loglevel 4; 

    uninitialized_variable_warn off;
    proxy_connect_timeout 15s;
    proxy_read_timeout 34s;
    proxy_send_timeout 30s;
    proxy_buffer_size 64k;
    proxy_buffers 4 64k;
    proxy_busy_buffers_size 128k;
    proxy_temp_file_write_size 128k;
    proxy_set_header X_BD_LOGID $logid;
    proxy_set_header LOGID $logid;
    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header REMOTE-HOST $remote_addr;
    proxy_set_header X-Forwarded-For $remote_addr;
    proxy_set_header CLIENTIP $remote_addr;
    proxy_http_version 1.1;

    port_in_redirect off;
    set_real_ip_from 192.168.0.0/24;
    real_ip_header CLIENTIP;
    underscores_in_headers on;
    include vhost/php.conf;//@3
}








附录:
@1:epoll模型->

@2:长连接
——————http1.1开始支持
——————使用长连接，可在建立连接后在keepalive的时间内不再三次握手建立长连接
——————客户端通过配置connection的（close|keepalive）两种状态来控制长连接的开关，如果客户端不带这两个状态，则如果是http1.0，则默认为close，如果是http1.1，则默认为keep-alive
——————server端（nginx）通过配置keepalive时间来调整长连接持续时间，为0则关闭。服务端决定keepalive打开，在响应的http头里面，会包含有connection头域，其值是Keep-Alive 否则是Close。
——————不同的场景需求决定是否使用长连接 当客户端的一次访问，需要多次访问同一个server时，打开keepalive的优势非常大，比如图片服务器，通常一个网页会包含很多个图片。
但拍照搜题这种场景就不适合打开长连接，会有很多无用连接打满连接池
@3 引用
——————这里的niginx.conf很多项没有配置，都在引用的php.conf里而fastcgi.conf也是php.conf中引用
——————这样把一些单独的配置取出 写在文件中，可使结构更清晰

@3:workerprocess:worker进程数 一般设置成内核数（减少进程上下文切换的消耗）可参考1.1