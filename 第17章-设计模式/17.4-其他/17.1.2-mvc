内容
      Model（模型）是应用程序中用于处理应用程序数据逻辑的部分。通常模型对象负责在数据库中存取数据。
      View（视图）是应用程序中处理数据显示的部分。通常视图是依据模型数据创建的。
      Controller（控制器）是应用程序中处理用户交互的部分。通常控制器负责从视图读取数据，控制用户输入，并向模型发送数据
          
    3、优点
       （1）首先，最重要的一点是多个视图能共享一个模型。同一个模型可以被不同的视图重用，大大提高了代码的可重用性。
       （2）由于MVC的三个模块相互独立，改变其中一个不会影响其他两个，所以依据这种设计思想能构造良好的松耦合的构件。
       （3）控制器提高了应用程序的灵活性和可配置性。控制器可以用来联接不同的模型和视图去完成用户的需求，这样控制器可以为构造应用程序提供强有力的手段。

   4、缺点
       （1）增加了系统结构和实现的复杂性。
          对于简单的界面，严格遵循MVC，使模型、视图与控制器分离，会增加结构的复杂性，并可能产生过多的更新操作，降低运行效率。
　　（2）视图与控制器间的过于紧密的连接。
           视图与控制器是相互分离，但确实联系紧密的部件，视图没有控制器的存在，其应用是很有限的，反之亦然，这样就妨碍了他们的独立重用。