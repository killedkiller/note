下面具体介绍一下各个flag的含义：

REDIS_MULTI表示客户端处于事务状态。当客户端执行multi命令后便由非事务状态转变为事务状态。在非事务状态下命令是一个接一个按序执行的；而当客户端处于事务状态时，命令则以事务为单位执行，一次性执行事务队列中的所有命令。
REDIS_DIRTY_EXEC表示EXEC无效状态。当客户端进入事务状态后，Redis等待接收一个或多个命令，并把它们放入命令队列中等待执行。如果某条命令在入队过程中发生错误则进入该状态，此时Redis将客户端的flags标识字段置为REDIS_DIRTY_EXEC，随后的EXEC命令将会失败返回。
REDIS_DIRTY_CAS表示非安全状态，该状态是针对watch命令设置的，客户端可以在声明事务前使用watch命令对一个或多个key进行监视，如果在事务执行之前这些被监视的key被其他命令修改，则进入REDIS_DIRTY_CAS状态。因为此时将要执行事务所相关的key被修改，无法保证事务的原子性。REDIS_DIRTY_CAS状态下如果执行exec命令也会失败返回，即相当于该事务被取消。
这里说明一下，上面的各个状态是我根据自己的理解定义的，便于理解事务执行流程，但可能有不规范之处。

所以Redis的事务整个流程大致是这样的：

客户端redisClient中有一个名叫flags的成员，标识当前客户端的状态。
在声明事务之前，我们可以通过watch命令对一个或多个key进行监视。如果在事务执行之前这些被监视的key被其他命令修改，Redis将redisClient->flags设置为REDIS_DIRTY_CAS标识。
使用multi命令可以标识着一个事务的开始，此时redisClient进入事务状态，其flags字段被设置为REDIS_MULTI标识。
当客户端进入事务状态后，Redis服务器等待接收一个或多个命令，并把它们放入命令队列中等待执行。如果某条命令在入队过程中发生错误，Redis会将redisClient的flags字段置为REDIS_DIRTY_EXEC标识。
最后我们通过exec命令执行事务，该命令将会检查redisClient的flags标识，如果该标识为REDIS_DIRTY_CAS或REDIS_DIRTY_EXEC，则事务执行失败，否则Redis一次性执行事务中的多个命令，并将所有命令的结果集合到回复队列，再作为 exec 命令的结果返回给客户端。